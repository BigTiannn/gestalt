#!/usr/bin/env node

/* eslint-env node */
/* eslint no-console:0 */

console.log(`/*
This file was generated by running

  $ ./scripts/whitespace.js

*/`);

console.log(`
:root {
  --hbt: 3px;
  --vbt: 3px;
  --sm-hbt: 4px;
  --sm-vbt: 4px;
  --md-hbt: 8px;
  --md-vbt: 6px;
  --lg-hbt: 8px;
  --lg-vbt: 6px;
}
`);

const breakpoints = ['', 'sm', 'md', 'lg'];
const scale = [0, 1, 2, 3, 4, 5, 6];

function margins(i, hbt, vbt) {
  return `:global .m${i} {
  margin: ${vbt} ${hbt};
}

:global .mt${i} {
  margin-top: ${vbt};
}

:global .mr${i} {
  margin-right: ${hbt};
}

:global .mb${i} {
  margin-bottom: ${vbt};
}

:global .ml${i} {
  margin-left: ${hbt};
}`;
}


function negativeMargins(i, nhbt, nvbt) {
  return `
:global .mn${i} {
  margin: ${nvbt} ${nhbt};
}

:global .mtn${i} {
  margin-top: ${nvbt};
}

:global .mbn${i} {
  margin-bottom: ${nvbt};
}

:global .mln${i} {
  margin-left: ${nhbt};
}

:global .mrn${i} {
  margin-right: ${nhbt};
}

:global .mxn${i} {
  margin-left: ${nhbt};
  margin-right: ${nhbt};
}

:global .myn${i} {
  margin-bottom: ${nvbt};
  margin-top: ${nvbt};
}`;
}

function padding(i, hbt, vbt) {
  return `
:global .p${i} {
  padding: ${vbt} ${hbt};
}

:global .px${i} {
  padding-left: ${hbt};
  padding-right: ${hbt};
}

:global .py${i} {
  padding-bottom: ${vbt};
  padding-top: ${vbt};
}`;
}

function indent(str) {
  return str.split('\n').map((line) => {
    if (line !== '') {
      return `  ${line}`;
    }
    return line;
  }).join('\n');
}

breakpoints.forEach((breakpoint) => {
  const rulesOutput = scale.reduce((rules, i) => {
    // So skip writing out the rules (0 * 0 = 0)
    if (breakpoint !== '' && i === 0) {
      return rules;
    }

    const prefix = breakpoint === '' ? '' : `${breakpoint}-`;
    const hbt = `calc(var(--${prefix}hbt) * ${i})`;
    const vbt = `calc(var(--${prefix}vbt) * ${i})`;

    const nhbt = `calc(0 - ${hbt})`;
    const nvbt = `calc(0 - ${vbt})`;

    // Margins
    rules.push(margins(i, hbt, vbt));

    // Negative margins
    if (i !== 0) {
      rules.push(negativeMargins(i, nhbt, nvbt));
    }

    // Padding
    rules.push(padding(i, hbt, vbt));

    rules.push('');

    return rules;
  }, []).join('\n');

  if (breakpoint !== '') {
    console.log(`@media (--${breakpoint}) {`);
    console.log(indent(rulesOutput));
    console.log('}\n');
  } else {
    console.log(rulesOutput);
  }
});
